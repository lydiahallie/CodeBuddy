type Skill {
  lang: String!
  value: String!
}

type AuthPayload {
  token: String
}

type Profile {
  userName: String!
  img: String!
  title: String!
  skills: [Skill!]!
  level: String!
  description: String!
  complete: Boolean!
}

type User {
  id: ID
  email: String
  firstName: String!
  lastName: String!
  gender: String
  profile: Profile
}

type Message {
  id: ID!
  author: User
  recipientUserId: String!
  body: String!
}

type PostContent {
  title: String!
  body: String!
  date: String!
}

type Post {
  id: ID!
  author: User!
  post: PostContent
}

type Query {
  me: User
  user(id: ID!): User
  users: [User!]!
  posts: [Post!]!
  messages(id: ID!): [Message!]!
}

type Mutation {
  createMessage(id: ID! message: String!): Message!
  createPost(id: ID! post: String!): Post!
  login(email: String! password: String!): User!
  logout: User
  signup(firstName: String! lastName: String! email: String! password: String!): User
  updateUser(email: String! gender: String! firstName: String! lastName: String!): User!
}